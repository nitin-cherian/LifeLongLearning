8.1 Inheritance concepts
========================

1. Inheritance is used for re-usability and extensibility

2. The name of the class in parenthesis is the base class

    class Child1(Parent):
        pass

3. What all can you do in the derived class

    Refer inherit.py

    a) Add a new functionality
    ---------------------------

    >>> class Child1(Parent):
    ...   def yow(self):
    ...     print('Child1.yow')
    ...
    >>> c = Child1()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: __init__() missing 1 required positional argument: 'value'
    >>> c = Child1(43)
    >>> c.value
    43
    >>> c.spam()
    Parent.spam 43
    >>> c.grok()
    Parent.grok
    Parent.spam 43
    >>> c.yow()
    Child1.yow

    b) Redefine a method in base class
    ----------------------------------
    >>> class Child2(Parent):
    ...   def spam(self):
    ...     print('Child2.spam', self.value)
    ...
    >>> c = Child2(54)
    >>> c.spam()
    Child2.spam 54
    >>> c.grok()
    Parent.grok
    Child2.spam 54

    Here the spam method is redefined in derived class.

    c) Ability to wrap an existing method
    -------------------------------------

    This is a variant of b) .

    Adding a tweak to the existing functionality, but still want to use the original method.
    Makes use of the function super()

    >>> class Child3(Parent):
    ...     def spam(self):
    ...         print('Child3.spam')
    ...         super().spam()
    ...
    >>> c = Child3(90)
    >>> c.spam()
    Child3.spam
    Parent.spam 90
    >>> c.grok()
    Parent.grok
    Child3.spam
    Parent.spam 90


    d) Add an attribute to the object
    ---------------------------------

    -- change the way the object is going to be initialized
    -- still have to worry about the parent - have to call the parent init method explicitly

    >>> class Child4(Parent):
    ...     def __init__(self, value, extra):
    ...         self.extra = extra
    ...         super().__init__(value) # invokes the parent init method
    ...
    >>> c = Child4(54, 67)
    >>> c.value
    54
    >>> c.extra
    67

    e) Multiple Inheritance

    -- The parents are going to merge together and we are going to get combined functionality
    >>> class Parent2:
    ...     def yow(self):
    ...         print('Parent2.yow')
    ...
    >>> class Child5(Parent, Parent2):
    ...     pass
    ...
    >>> c = Child5()
    Traceback (most recent call last):
      File "/usr/lib/python3.5/code.py", line 91, in runcode
        exec(code, self.locals)
      File "<input>", line 1, in <module>
    TypeError: __init__() missing 1 required positional argument: 'value'
    >>> c = Child5(43)
    >>> c.spam()
    Parent.spam 43
    >>> c.grok()
    Parent.grok
    Parent.spam 43
    >>> c.yow()
    Parent2.yow


8.2 Inheritance in practice
===========================

-- Code reuse and extensibility

-- Refer holding.py and table.py

-- In table.py, the print_table function is tied to particular implementation
    -- What if we wanted to have the output in HTML format or CSV format
    -- To do this, we can supply the print_table function a formatter which is an instance of a TableFormatter class
    -- the formatter can then be a HTMLTableFormatter, CSVTableFormatter or TextTableFormatter

8.3 Advanced Inheritance
========================

-- if the subclass uses a custom init (eg: for adding an attribute)
    -- Initialize the parent also, by invoking the parent's init
    -- Otherwise, we can run into all sorts of problems.

-- we can redirect the output of print statement into a file using the file keyword.
    -- by default it is sys.stdout
    -- file is not a string but a file object.


8.4 Designing for Inheritance
=============================

-- Some design issues needs to be considered while coding inheritance

-- refer table.py

-- Issue 1:
    -- what is the relationship between the class 'TableFormatter' and the function 'print_table' ?
    -- One might use the function 'print_table' as a method in the class 'TableFormatter'
        -- refer table1.py
        -- moves the function into the class
        -- make an object of the subclasses 'TextTableFormatter', 'HTMLTableFormatter' or 'CSVTableFormatter'
        -- use this object to drive the printing by invoking the 'print_table' method.
        -- Is this a good idea?
            -- Not in this case
            -- because the print_table is very specific. You cannot print the table in any other format. You have to give it a list of objects and column names

-- Issue 2:
    -- Use a separate class for composing the formatter object.
    -- Use the object of this class to drive the printing
    -- refer table2.py
    -- Problem:
       -- complex
       -- too many object plumming
       -- print_table is the only method in the new class. It might have been good, if there were other functions in the new class


8.5 Defensive Programming with Abstract Base Class
==================================================

-- Refer table.py

-- If the subclasses of the TableFormatter class does not implement the heading or row method
    -- when the sublass is instantiated, no error is thrown
       formatter = table.TextTableFormatter()

    -- The error is deferred to a later stage, when the formatter object is used to invoke
       the heading or row method(whichever is not implementedo)

       formatter = table.TextTableFormatter()
       table.print_table(porfolio, ['name', 'shares'], formatter)
       Traceback (most recent call last):
       File "/usr/lib/python3.5/code.py", line 91, in runcode
       exec(code, self.locals)
       File "<input>", line 1, in <module>
       File "/home/nitin/Learn/Repositories/Github/LifeLongLearning/Python/PythonProgrammingLanguage/Inheritance/table.py", line 7, in print_table
       formatter.heading(colname)
       File "/home/nitin/Learn/Repositories/Github/LifeLongLearning/Python/PythonProgrammingLanguage/Inheritance/table.py", line 23, in heading
       raise NotImplementedError
       NotImplementedError


    -- We would like to tell the user of this class about the error, as soon as he instantiates
    the subclass

        -- This can be done using Abstract Base Class and abstract method

            -- Make the baseclass Abstract (inherit from abc.ABC)

            -- declare the methods as abstract methods (@asbtractmethod)

            -- No need to raise 'NotImplemented' error in the base class methods.

        >>> formatter = table.TextTableFormatter()
        Traceback (most recent call last):
        File "/usr/lib/python3.5/code.py", line 91, in runcode
        exec(code, self.locals)
        File "<input>", line 1, in <module>
        TypeError: Can't instantiate abstract class TextTableFormatter with abstract methods heading


        -- In this way, it forces the user to implement the methods in subclass before instantiation.

-- isIntance() check

	-- It is a good idea to check the type of 'formatter' before it is used to invoke the base class methods

    -- if formatter is not an instance of TableFormatter, no need to go further

    -- So the isInstance(formatter, TableFormatter) is a defensive check to prevent this.

    -- We are using the baseclass 'TableFormatter' in this method as it can serve all its subclasses.
