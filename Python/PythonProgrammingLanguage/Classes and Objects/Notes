7.2 Understanding Attribute Access
==================================

1. Only 3 operations can be done on an instance of a class in Python object model

   -- lookup an attribute
    >>> h = Holding('AA', '2016-11-12', 100, 53.5)
    >>> h
    <__main__.Holding instance at 0x7fa96fbb5098>
    >>> h.name
    'AA'
    >>> h.shares
    100
    >>> h.date
    '2016-11-12'

   -- set an attribute
    >>> h.shares = 20
    >>> h.shares
    20
    >>> h.price = 67.9
    >>> h.price
    67.9

   -- delete an attribute
   >>> del h.price
    >>> h.price
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: Holding instance has no attribute 'price'

2. Python does not care about creating a new attribute at runtime

    >>> h
    <__main__.Holding instance at 0x7fa96fbb5098>
    >>> h.__dict__
    {'date': '2016-11-12', 'prices': 78.5, 'name': 'AA', 'shares': 20}
    >>> h.time = "10:30am"
    >>> h.__dict__
    {'name': 'AA', 'shares': 20, 'prices': 78.5, 'time': '10:30am', 'date': '2016-11-12'}

    This may lead to some problems like so:
    >>> h
    <__main__.Holding instance at 0x7fa96fbb5098>
    >>> h.__dict__
    {'date': '2016-11-12', 'prices': 78.5, 'name': 'AA', 'shares': 20}
    >>> h.time = "10:30am"
    >>> h.__dict__
    {'name': 'AA', 'shares': 20, 'prices': 78.5, 'time': '10:30am', 'date': '2016-11-12'}

    used 'share' in place for 'shares' and all of a sudden you have another attribute.

3.  The methods of an instance also has the same rules:

    >> h = Holding('AA', '2016-11-12', 100, 53.5)
    >>> h.__dict__
    {'date': '2016-11-12', 'price': 53.5, 'name': 'AA', 'shares': 100}
    >>> h.cost()
    5350.0
    >>> c = h.cost
    >>> c
    <bound method Holding.cost of <__main__.Holding instance at 0x7fa96fbc1e18>>
    >>> c()
    5350.0
    >>> s = h.sell
    >>> s(20)
    >>> h.shares

4. getattr, setattr - functions used to access attribute

    >>> getattr(h, 'name')
    'AA'
    >>> getattr(h, 'price')
    53.5
    >>> setattr(h, 'shares', 24)
    >>> h.shares
    24

    -- Allows general purpose things: Given a list of columns and it returns the values of the columns.
       -- can pick the attributes, order of attributes etc.

    >>> h = Holding('AA', '2017-09-10', 89, 56.4)
    >>>
    >>> h
    <__main__.Holding object at 0x7fc9dc57b4e0>
    >>> h.shares
    89
    >>> output_column = ['name', 'shares', 'date', 'price']
    >>> for column in output_column:
    ...    print(column, " = ", getattr(h, column))
    ...
    name  =  AA
    shares  =  89
    date  =  2017-09-10
    price  =  56.4

5.  Alternate constructor - @classmethod

    - Sometimes it is required to have a different method of constructing an instance of a class

    - A class can have only 1 __init__ method.

    - Rather than using a function that is detached from the class, @classmethod can be used.

    - The first parameter of the @classmethod holds the name of the class.

    - All the necessary operations can be done first in this method and alternate construction can be done using the
      name of the class.

    - Another advantage of @classmethod is the first parameter 'cls'. This is a generic name
      and not hardcoded. So if this class is inherited by a subclass, the subclass gets these alternate ctors and the
      'cls' becomes the name of the subclass.

    - Refer date.py

    class time.struct_time
    The type of the time value sequence returned by gmtime(), localtime(), and strptime(). It is an object with a named tuple interface: values can be accessed by index and by attribute name. The following values are present:

    Index	Attribute	Values
    0	tm_year	(for example, 1993)
    1	tm_mon	range [1, 12]
    2	tm_mday	range [1, 31]
    3	tm_hour	range [0, 23]
    4	tm_min	range [0, 59]
    5	tm_sec	range [0, 61]; see (2) in strftime() description
    6	tm_wday	range [0, 6], Monday is 0
    7	tm_yday	range [1, 366]
    8	tm_isdst	0, 1 or -1; see below


















