1. Installing Docker
===================

Installing on Linux
------------------

-- Do not use default apt/yum to install Docker

   -- The packages will be old and not official Docker-Built packages.

-- Use Docker's automated script to add their repo and install dependencies

   -- curl -sSL https://get.docker.com/ | sh


2. Course Chat Room
===================

General Steps:

1. Go to chat.dockermastery.com and give it your email address.
2. You will be sent an email from Slack, with a invite link inside it.
3. Click that link.
4. Fill out the form to create your Slack account.
5. Use that Slack account to access dockermastery.slack.com

3. Check Docker Install and Config
=================================

-- # docker version

   -- shows 2 sections: Client and Server
   -- Client --> The CLI which communicates with Server through APIs
   -- Server --> Docker Engine
             -- Docker Engine runs as a daemon
             -- It can be local meaning Client and Server can be on the same machine
             -- Or it can be remote to the Client.

-- # docker info

   -- Detailed info and configuration of the docker system which is running
   -- It contains info such as how many docker images, docker containers etc.

-- These 2 commands confirm that Docker is up and running.


-- # docker

   -- This command will list all the available docker commands the CLI supports.

-- docker command format

   docker <command> <subcommand> (options)

   This is the new format

   while the old format was:

   docker <command> (options)

4. Starting a Ngnix Web Server
=============================

-- Image vs Container

   -- Image - application we want to run
   -- Container - instance of the image running as a process
      -- can have any number of containers running off the same image 
      

-- # docker container run --publish 80:80 ngnix

   What does this command do

   -- The Docker Engine looks up ngnix image and pulls the image from docker hub (hub.docker.com)
   -- Started a new container for the ngnix image
   -- --publish 80:80
        -- Opened port 80 on the host IP
        -- Routes port 80 traffic on the host IP to port 80 of the container IP
        -- The Nginx web server runs on the port 80 of container IP

   -- This command runs the container in the foreground

-- # docker container run --publish 80:80 --detach nginx

   -- This command runs the container in the background
   -- It returns the unique container id
   -- Each time you run the command, it runs a new container for the image

   # sudo docker container run --publish 80:80 --detach nginx
   b815092838dd01127f5e6edcb0a47b0e42d51dae26b7183b2aba790dc673153a

-- List the containers that are running

   -- # docker container ls
  
   # sudo docker container ls
   CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
   b815092838dd        nginx               "nginx -g 'daemon ..."   40 seconds ago      Up 39 seconds       0.0.0.0:80->80/tcp   practical_jones


   -- Notice the container id matches the id in the previous command 

-- Stop the running container

   -- # docker container stop b81

   -- The container id to specified for this command needs to as large as to make it unique.

   -- The commands returns the container id on stopping the container.

   # sudo docker container stop b81
   b81
   # sudo docker container ls
   CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

-- List all containers both running and exited.

   # docker container ls -a

   -- ls command shows names for the containers.
   -- the names are unique for the containers just like id.
   -- the names are generated randomly if you dont specify a name while running a container.

-- Specify a name for the container

   -- # docker container run --publish 80:80 --detach --name "webhost" nginx
   80d966fccee0870cbdf7dfe8d9f71331a74f078715bade2925c64b6dadfdf134

   # sudo docker container ls -a
   CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                      PORTS                NAMES
   80d966fccee0        nginx               "nginx -g 'daemon ..."   About a minute ago   Up About a minute           0.0.0.0:80->80/tcp   webhost
   b815092838dd        nginx               "nginx -g 'daemon ..."   13 minutes ago       Exited (0) 9 minutes ago                         practical_jones
   c50fb599c22e        nginx               "nginx -g 'daemon ..."   17 minutes ago       Exited (0) 16 minutes ago                        musing_kare
   c70248a9d81e        nginx               "nginx -g 'daemon ..."   22 minutes ago       Exited (0) 17 minutes ago                        zealous_blackwell
   166cd223f005        nginx               "nginx -g 'daemon ..."   2 days ago           Exited (0) 2 days ago                            youthful_hypatia

-- Notice wee are not able to see the logs when we run in the background

-- To spit out the logs

   # docker container logs webhost

   -- webhost is the name of the container we just created.

-- List the processes run in the container

   -- # docker container top webhost

   # sudo docker container stop b81
   b81
   nitin@devb:docker-mastery$ sudo docker container ls
   CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

-- Get a list of command that can run on a container

   -- # docker container webhost --help

-- Remove containers

   -- # docker container rm <id1> <id2> ..

      -- using this command, the running containers cannot be removed

      -- two method to remove running containers

         1. Stop the container and use the previous command

         2. # docker container rm -f <id>


5. Container vs VM
==================

-- Containers are processes and not mini-VMs

-- # docker container run --name mongod -d mongo

   # docker container ls
   CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
   57569c812759        mongo               "docker-entrypoint..."   10 seconds ago      Up 9 seconds        27017/tcp           mongod

   # ps aux

   -- This should show that mongod is just a process that runs on your system

   vboxadd   3914  1.0  1.2 948684 65280 ?        Ssl  10:13   0:00 mongod

   -- this can be verified if you do 

   # docker container top mongod
   UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
   vboxadd             3914                3897                0                   10:13               ?                   00:00:00            mongod


   -- Stop the docker container and we should not see the process on Linux 

   # docker container stop mongod

   -- to start the stopped container

   # docker containe start mongod

6. Docker docs
==============
-- Online: docs.docker.com

-- cmdline: docker --help


7. Assignment
=============
-- pass environment variable to a container using -e option

-- Display the images

   -- # docker image ls

8. What is going on in Container
===============================

# docker container top -- processes running inside the container

# docker container inspect -- displays the configurations used to start the container and the metadata about the container
                           -- does not display the running stats of the container.

# docker container stats -- display live performance data about containers
                         -- if no name is specified, stats of all containers is displayed.


9. Getting a shell inside containers: No SSH needed
===================================================

-- # docker container run -it 

   -- start new container interactively
   -- -i --> for interacting with the terminal
   -- -t --> opens a terminal
   
   eg: docker container run -it --name proxy1 nginx bash

   -- The option after the image name is the command that needs to run when the container runs. In the example it is bash
   -- -it instructs the docker to interact with bash in a new pseudo terminal
   -- If no option is specified, the default command for the container starts. In nginx case, the daemon "nginx -g 'daemon ..." 
   -- If command that is started is a daemon, the container will not exit
   -- But if the command like bash, if we exit bash --> The container also exits
   -- This means, a container runs as long as the command which started it runs

   -- If the stopped container is started again:

   # docker container start proxy1

   then it would start the command 'bash' which originally started it. But will not allow you to interact with it, because no -it option was used.

   -- when you start a stopped container with interactivity use -at option
   # docker container start -ai ubuntu

-- How to run additonal processes in a running container

   docker container exec

   eg: # docker container exec -it mysql bash

   -- This would run a new process bash in this case inside the container. # check ps aux command

   -- If you exit from bash, the container will not exit, as the command which started(mysql) it is still running.
   

-- docker pull <image>

   -- pull image from docker hub


-- docker image ls

   -- list images that is available locally

-- what happens if you try to run the following command:

   # docker container run --name alpine_os -it alpine bash

   -- it will start the container and try to execute the bash command. Does not find the command and throws an error as the bash command is not part of the alpine image. Instead of bash, sh is packaged as part of the alpine package

   So,

   # docker container run --name alpine_os -it alpine sh

   -- This should give you the sh prompt


